CONTENTS
-----------------------------------------------------
Test file: resources/inventory_invalid_removal.txt    |   Line: 10
Test file: resources/inventory_long.txt     |   Line: 166
Test file: resources/inventory_short.txt  |   Line: 921
Test file: resources/SuperMarketFullTest.txt    |   Line: 1135
-----------------------------------------------------

-----------------------------------------------------
-----------------------------------------------------
Test file: resources/inventory_invalid_removal.txt

NOTES: Testing for removal of items not in the list
-----------------------------------------------------
/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/bin/java -Didea.launcher.port=7538 "-Didea.launcher.bin.path=/Applications/IntelliJ IDEA.app/Contents/bin" -Dfile.encoding=UTF-8 -classpath "/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/deploy.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/cldrdata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/dnsns.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/jaccess.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/jfxrt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/localedata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/nashorn.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/sunec.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/zipfs.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/javaws.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/jfxswt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/management-agent.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/plugin.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/lib/ant-javafx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/lib/dt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/lib/javafx-mx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/lib/jconsole.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/lib/packager.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/lib/sa-jdi.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/lib/tools.jar:/Users/zachrooney/IdeaProjects/Project Outputs/production/rooneyz-project06:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar" com.intellij.rt.execution.application.AppMain lazyTrees.SuperMarket
Test file: resources/inventory_invalid_removal.txt
Garbage collection threshold = 4


Update at line #1: add soup
"hard" number of unique items (i.e. mSizeHard) = 1
"soft" number of unique items (i.e. mSize) = 1

Testing traversing "hard" inventory:
soup:1

Testing traversing "soft" inventory:
soup:1


at line #1: add soup
First item: soup:1
Last item: soup:1


Update at line #2: add tangerines
"hard" number of unique items (i.e. mSizeHard) = 2
"soft" number of unique items (i.e. mSize) = 2

Testing traversing "hard" inventory:
soup:1  tangerines:1

Testing traversing "soft" inventory:
soup:1  tangerines:1


at line #2: add tangerines
First item: soup:1
Last item: tangerines:1


Update at line #3: add turnips
"hard" number of unique items (i.e. mSizeHard) = 3
"soft" number of unique items (i.e. mSize) = 3

Testing traversing "hard" inventory:
soup:1  tangerines:1  turnips:1

Testing traversing "soft" inventory:
soup:1  tangerines:1  turnips:1


at line #3: add turnips
First item: soup:1
Last item: turnips:1


Update at line #4: add milk
"hard" number of unique items (i.e. mSizeHard) = 4
"soft" number of unique items (i.e. mSize) = 4

Testing traversing "hard" inventory:
milk:1  soup:1  tangerines:1  turnips:1

Testing traversing "soft" inventory:
milk:1  soup:1  tangerines:1  turnips:1


at line #4: add milk
First item: milk:1
Last item: turnips:1


Update at line #5: add apples
"hard" number of unique items (i.e. mSizeHard) = 5
"soft" number of unique items (i.e. mSize) = 5

Testing traversing "hard" inventory:
apples:1  milk:1  soup:1  tangerines:1  turnips:1

Testing traversing "soft" inventory:
apples:1  milk:1  soup:1  tangerines:1  turnips:1


at line #5: add apples
First item: apples:1
Last item: turnips:1


Update at line #6: add bread
"hard" number of unique items (i.e. mSizeHard) = 6
"soft" number of unique items (i.e. mSize) = 6

Testing traversing "hard" inventory:
apples:1  bread:1  milk:1  soup:1  tangerines:1  turnips:1

Testing traversing "soft" inventory:
apples:1  bread:1  milk:1  soup:1  tangerines:1  turnips:1


at line #6: add bread
First item: apples:1
Last item: turnips:1


Update at line #7: buy soup
"hard" number of unique items (i.e. mSizeHard) = 6
"soft" number of unique items (i.e. mSize) = 5

Testing traversing "hard" inventory:
apples:1  bread:1  milk:1  soup:0  tangerines:1  turnips:1

Testing traversing "soft" inventory:
apples:1  bread:1  milk:1  tangerines:1  turnips:1


at line #7: buy soup
First item: apples:1
Last item: turnips:1

Warning: Unable to fulfill request: at line #8: buy soup
Warning: Item soup is out of stock.

at line #8: buy soup
First item: apples:1
Last item: turnips:1


State of inventory before cleanup:
"hard" number of unique items (i.e. mSizeHard) = 6
"soft" number of unique items (i.e. mSize) = 5

Testing traversing "hard" inventory:
apples:1  bread:1  milk:1  soup:0  tangerines:1  turnips:1

Testing traversing "soft" inventory:
apples:1  bread:1  milk:1  tangerines:1  turnips:1



Final state of inventory after cleanup:
"hard" number of unique items (i.e. mSizeHard) = 5
"soft" number of unique items (i.e. mSize) = 5

Testing traversing "hard" inventory:
apples:1  bread:1  milk:1  tangerines:1  turnips:1

Testing traversing "soft" inventory:
apples:1  bread:1  milk:1  tangerines:1  turnips:1


Done with SuperMarket.

Process finished with exit code 0

-----------------------------------------------------
-----------------------------------------------------
Test file: resources/inventory_log.txt

NOTES: Full test given to us by the professor. Does
not contain errors, only testing normal operations
-----------------------------------------------------
/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/bin/java -Didea.launcher.port=7540 "-Didea.launcher.bin.path=/Applications/IntelliJ IDEA.app/Contents/bin" -Dfile.encoding=UTF-8 -classpath "/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/deploy.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/cldrdata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/dnsns.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/jaccess.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/jfxrt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/localedata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/nashorn.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/sunec.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/zipfs.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/javaws.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/jfxswt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/management-agent.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/plugin.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/lib/ant-javafx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/lib/dt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/lib/javafx-mx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/lib/jconsole.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/lib/packager.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/lib/sa-jdi.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/lib/tools.jar:/Users/zachrooney/IdeaProjects/Project Outputs/production/rooneyz-project06:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar" com.intellij.rt.execution.application.AppMain lazyTrees.SuperMarket
Test file: resources/inventory_log.txt
Garbage collection threshold = 4


Update at line #1: add milk
"hard" number of unique items (i.e. mSizeHard) = 1
"soft" number of unique items (i.e. mSize) = 1

Testing traversing "hard" inventory:
milk:1

Testing traversing "soft" inventory:
milk:1


at line #1: add milk
First item: milk:1
Last item: milk:1


Update at line #2: add milk
"hard" number of unique items (i.e. mSizeHard) = 1
"soft" number of unique items (i.e. mSize) = 1

Testing traversing "hard" inventory:
milk:2

Testing traversing "soft" inventory:
milk:2


at line #2: add milk
First item: milk:2
Last item: milk:2


Update at line #3: add soup
"hard" number of unique items (i.e. mSizeHard) = 2
"soft" number of unique items (i.e. mSize) = 2

Testing traversing "hard" inventory:
milk:2  soup:1

Testing traversing "soft" inventory:
milk:2  soup:1


at line #3: add soup
First item: milk:2
Last item: soup:1


Update at line #4: add soup
"hard" number of unique items (i.e. mSizeHard) = 2
"soft" number of unique items (i.e. mSize) = 2

Testing traversing "hard" inventory:
milk:2  soup:2

Testing traversing "soft" inventory:
milk:2  soup:2


at line #4: add soup
First item: milk:2
Last item: soup:2


Update at line #5: add apples
"hard" number of unique items (i.e. mSizeHard) = 3
"soft" number of unique items (i.e. mSize) = 3

Testing traversing "hard" inventory:
apples:1  milk:2  soup:2

Testing traversing "soft" inventory:
apples:1  milk:2  soup:2


at line #5: add apples
First item: apples:1
Last item: soup:2


Update at line #6: add tomato
"hard" number of unique items (i.e. mSizeHard) = 4
"soft" number of unique items (i.e. mSize) = 4

Testing traversing "hard" inventory:
apples:1  milk:2  soup:2  tomato:1

Testing traversing "soft" inventory:
apples:1  milk:2  soup:2  tomato:1


at line #6: add tomato
First item: apples:1
Last item: tomato:1


Update at line #7: add eggplant
"hard" number of unique items (i.e. mSizeHard) = 5
"soft" number of unique items (i.e. mSize) = 5

Testing traversing "hard" inventory:
apples:1  eggplant:1  milk:2  soup:2  tomato:1

Testing traversing "soft" inventory:
apples:1  eggplant:1  milk:2  soup:2  tomato:1


at line #7: add eggplant
First item: apples:1
Last item: tomato:1


Update at line #8: add avocado
"hard" number of unique items (i.e. mSizeHard) = 6
"soft" number of unique items (i.e. mSize) = 6

Testing traversing "hard" inventory:
apples:1  avocado:1  eggplant:1  milk:2  soup:2  tomato:1

Testing traversing "soft" inventory:
apples:1  avocado:1  eggplant:1  milk:2  soup:2  tomato:1


at line #8: add avocado
First item: apples:1
Last item: tomato:1


Update at line #9: add tomato
"hard" number of unique items (i.e. mSizeHard) = 6
"soft" number of unique items (i.e. mSize) = 6

Testing traversing "hard" inventory:
apples:1  avocado:1  eggplant:1  milk:2  soup:2  tomato:2

Testing traversing "soft" inventory:
apples:1  avocado:1  eggplant:1  milk:2  soup:2  tomato:2


at line #9: add tomato
First item: apples:1
Last item: tomato:2


Update at line #10: add onion
"hard" number of unique items (i.e. mSizeHard) = 7
"soft" number of unique items (i.e. mSize) = 7

Testing traversing "hard" inventory:
apples:1  avocado:1  eggplant:1  milk:2  onion:1  soup:2  tomato:2

Testing traversing "soft" inventory:
apples:1  avocado:1  eggplant:1  milk:2  onion:1  soup:2  tomato:2


at line #10: add onion
First item: apples:1
Last item: tomato:2


Update at line #11: add beans
"hard" number of unique items (i.e. mSizeHard) = 8
"soft" number of unique items (i.e. mSize) = 8

Testing traversing "hard" inventory:
apples:1  avocado:1  beans:1  eggplant:1  milk:2  onion:1  soup:2  tomato:2

Testing traversing "soft" inventory:
apples:1  avocado:1  beans:1  eggplant:1  milk:2  onion:1  soup:2  tomato:2


at line #11: add beans
First item: apples:1
Last item: tomato:2


Update at line #12: add beans
"hard" number of unique items (i.e. mSizeHard) = 8
"soft" number of unique items (i.e. mSize) = 8

Testing traversing "hard" inventory:
apples:1  avocado:1  beans:2  eggplant:1  milk:2  onion:1  soup:2  tomato:2

Testing traversing "soft" inventory:
apples:1  avocado:1  beans:2  eggplant:1  milk:2  onion:1  soup:2  tomato:2


at line #12: add beans
First item: apples:1
Last item: tomato:2


Update at line #13: buy apples
"hard" number of unique items (i.e. mSizeHard) = 8
"soft" number of unique items (i.e. mSize) = 7

Testing traversing "hard" inventory:
apples:0  avocado:1  beans:2  eggplant:1  milk:2  onion:1  soup:2  tomato:2

Testing traversing "soft" inventory:
avocado:1  beans:2  eggplant:1  milk:2  onion:1  soup:2  tomato:2


at line #13: buy apples
First item: avocado:1
Last item: tomato:2

Warning: Unable to fulfill request: at line #14: buy fish
Warning: Item fish is out of stock.

at line #14: buy fish
First item: avocado:1
Last item: tomato:2


Update at line #15: add pie
"hard" number of unique items (i.e. mSizeHard) = 9
"soft" number of unique items (i.e. mSize) = 8

Testing traversing "hard" inventory:
apples:0  avocado:1  beans:2  eggplant:1  milk:2  onion:1  pie:1  soup:2  tomato:2

Testing traversing "soft" inventory:
avocado:1  beans:2  eggplant:1  milk:2  onion:1  pie:1  soup:2  tomato:2


at line #15: add pie
First item: avocado:1
Last item: tomato:2


Update at line #16: add tomato
"hard" number of unique items (i.e. mSizeHard) = 9
"soft" number of unique items (i.e. mSize) = 8

Testing traversing "hard" inventory:
apples:0  avocado:1  beans:2  eggplant:1  milk:2  onion:1  pie:1  soup:2  tomato:3

Testing traversing "soft" inventory:
avocado:1  beans:2  eggplant:1  milk:2  onion:1  pie:1  soup:2  tomato:3


at line #16: add tomato
First item: avocado:1
Last item: tomato:3


Update at line #17: add cake
"hard" number of unique items (i.e. mSizeHard) = 10
"soft" number of unique items (i.e. mSize) = 9

Testing traversing "hard" inventory:
apples:0  avocado:1  beans:2  cake:1  eggplant:1  milk:2  onion:1  pie:1  soup:2  tomato:3

Testing traversing "soft" inventory:
avocado:1  beans:2  cake:1  eggplant:1  milk:2  onion:1  pie:1  soup:2  tomato:3


at line #17: add cake
First item: avocado:1
Last item: tomato:3


Update at line #18: add fish
"hard" number of unique items (i.e. mSizeHard) = 11
"soft" number of unique items (i.e. mSize) = 10

Testing traversing "hard" inventory:
apples:0  avocado:1  beans:2  cake:1  eggplant:1  fish:1  milk:2  onion:1  pie:1  soup:2  tomato:3

Testing traversing "soft" inventory:
avocado:1  beans:2  cake:1  eggplant:1  fish:1  milk:2  onion:1  pie:1  soup:2  tomato:3


at line #18: add fish
First item: avocado:1
Last item: tomato:3


Update at line #19: add chicken
"hard" number of unique items (i.e. mSizeHard) = 12
"soft" number of unique items (i.e. mSize) = 11

Testing traversing "hard" inventory:
apples:0  avocado:1  beans:2  cake:1  chicken:1  eggplant:1  fish:1  milk:2  onion:1  pie:1  soup:2  tomato:3

Testing traversing "soft" inventory:
avocado:1  beans:2  cake:1  chicken:1  eggplant:1  fish:1  milk:2  onion:1  pie:1  soup:2  tomato:3


at line #19: add chicken
First item: avocado:1
Last item: tomato:3


Update at line #20: add cereal
"hard" number of unique items (i.e. mSizeHard) = 13
"soft" number of unique items (i.e. mSize) = 12

Testing traversing "hard" inventory:
apples:0  avocado:1  beans:2  cake:1  cereal:1  chicken:1  eggplant:1  fish:1  milk:2  onion:1  pie:1  soup:2  tomato:3

Testing traversing "soft" inventory:
avocado:1  beans:2  cake:1  cereal:1  chicken:1  eggplant:1  fish:1  milk:2  onion:1  pie:1  soup:2  tomato:3


at line #20: add cereal
First item: avocado:1
Last item: tomato:3


Update at line #21: add cookies
"hard" number of unique items (i.e. mSizeHard) = 14
"soft" number of unique items (i.e. mSize) = 13

Testing traversing "hard" inventory:
apples:0  avocado:1  beans:2  cake:1  cereal:1  chicken:1  cookies:1  eggplant:1  fish:1  milk:2  onion:1  pie:1  soup:2  tomato:3

Testing traversing "soft" inventory:
avocado:1  beans:2  cake:1  cereal:1  chicken:1  cookies:1  eggplant:1  fish:1  milk:2  onion:1  pie:1  soup:2  tomato:3


at line #21: add cookies
First item: avocado:1
Last item: tomato:3


Update at line #22: buy onion
"hard" number of unique items (i.e. mSizeHard) = 14
"soft" number of unique items (i.e. mSize) = 12

Testing traversing "hard" inventory:
apples:0  avocado:1  beans:2  cake:1  cereal:1  chicken:1  cookies:1  eggplant:1  fish:1  milk:2  onion:0  pie:1  soup:2  tomato:3

Testing traversing "soft" inventory:
avocado:1  beans:2  cake:1  cereal:1  chicken:1  cookies:1  eggplant:1  fish:1  milk:2  pie:1  soup:2  tomato:3


at line #22: buy onion
First item: avocado:1
Last item: tomato:3


Update at line #23: buy pie
"hard" number of unique items (i.e. mSizeHard) = 14
"soft" number of unique items (i.e. mSize) = 11

Testing traversing "hard" inventory:
apples:0  avocado:1  beans:2  cake:1  cereal:1  chicken:1  cookies:1  eggplant:1  fish:1  milk:2  onion:0  pie:0  soup:2  tomato:3

Testing traversing "soft" inventory:
avocado:1  beans:2  cake:1  cereal:1  chicken:1  cookies:1  eggplant:1  fish:1  milk:2  soup:2  tomato:3


at line #23: buy pie
First item: avocado:1
Last item: tomato:3


Update at line #24: buy cookies
"hard" number of unique items (i.e. mSizeHard) = 14
"soft" number of unique items (i.e. mSize) = 10

Testing traversing "hard" inventory:
apples:0  avocado:1  beans:2  cake:1  cereal:1  chicken:1  cookies:0  eggplant:1  fish:1  milk:2  onion:0  pie:0  soup:2  tomato:3

Testing traversing "soft" inventory:
avocado:1  beans:2  cake:1  cereal:1  chicken:1  eggplant:1  fish:1  milk:2  soup:2  tomato:3


at line #24: buy cookies
First item: avocado:1
Last item: tomato:3

at line #24: buy cookies
calling garbage collection...

inventory after garbage collection:
"hard" number of unique items (i.e. mSizeHard) = 10
"soft" number of unique items (i.e. mSize) = 10

Testing traversing "hard" inventory:
avocado:1  beans:2  cake:1  cereal:1  chicken:1  eggplant:1  fish:1  milk:2  soup:2  tomato:3

Testing traversing "soft" inventory:
avocado:1  beans:2  cake:1  cereal:1  chicken:1  eggplant:1  fish:1  milk:2  soup:2  tomato:3



Update at line #25: add apples
"hard" number of unique items (i.e. mSizeHard) = 11
"soft" number of unique items (i.e. mSize) = 11

Testing traversing "hard" inventory:
apples:1  avocado:1  beans:2  cake:1  cereal:1  chicken:1  eggplant:1  fish:1  milk:2  soup:2  tomato:3

Testing traversing "soft" inventory:
apples:1  avocado:1  beans:2  cake:1  cereal:1  chicken:1  eggplant:1  fish:1  milk:2  soup:2  tomato:3


at line #25: add apples
First item: apples:1
Last item: tomato:3


Update at line #26: add basil
"hard" number of unique items (i.e. mSizeHard) = 12
"soft" number of unique items (i.e. mSize) = 12

Testing traversing "hard" inventory:
apples:1  avocado:1  basil:1  beans:2  cake:1  cereal:1  chicken:1  eggplant:1  fish:1  milk:2  soup:2  tomato:3

Testing traversing "soft" inventory:
apples:1  avocado:1  basil:1  beans:2  cake:1  cereal:1  chicken:1  eggplant:1  fish:1  milk:2  soup:2  tomato:3


at line #26: add basil
First item: apples:1
Last item: tomato:3


Update at line #27: add juice
"hard" number of unique items (i.e. mSizeHard) = 13
"soft" number of unique items (i.e. mSize) = 13

Testing traversing "hard" inventory:
apples:1  avocado:1  basil:1  beans:2  cake:1  cereal:1  chicken:1  eggplant:1  fish:1  juice:1  milk:2  soup:2  tomato:3

Testing traversing "soft" inventory:
apples:1  avocado:1  basil:1  beans:2  cake:1  cereal:1  chicken:1  eggplant:1  fish:1  juice:1  milk:2  soup:2  tomato:3


at line #27: add juice
First item: apples:1
Last item: tomato:3


Update at line #28: add juice
"hard" number of unique items (i.e. mSizeHard) = 13
"soft" number of unique items (i.e. mSize) = 13

Testing traversing "hard" inventory:
apples:1  avocado:1  basil:1  beans:2  cake:1  cereal:1  chicken:1  eggplant:1  fish:1  juice:2  milk:2  soup:2  tomato:3

Testing traversing "soft" inventory:
apples:1  avocado:1  basil:1  beans:2  cake:1  cereal:1  chicken:1  eggplant:1  fish:1  juice:2  milk:2  soup:2  tomato:3


at line #28: add juice
First item: apples:1
Last item: tomato:3


Update at line #29: add bread
"hard" number of unique items (i.e. mSizeHard) = 14
"soft" number of unique items (i.e. mSize) = 14

Testing traversing "hard" inventory:
apples:1  avocado:1  basil:1  beans:2  bread:1  cake:1  cereal:1  chicken:1  eggplant:1  fish:1  juice:2  milk:2  soup:2  tomato:3

Testing traversing "soft" inventory:
apples:1  avocado:1  basil:1  beans:2  bread:1  cake:1  cereal:1  chicken:1  eggplant:1  fish:1  juice:2  milk:2  soup:2  tomato:3


at line #29: add bread
First item: apples:1
Last item: tomato:3


Update at line #30: add meat
"hard" number of unique items (i.e. mSizeHard) = 15
"soft" number of unique items (i.e. mSize) = 15

Testing traversing "hard" inventory:
apples:1  avocado:1  basil:1  beans:2  bread:1  cake:1  cereal:1  chicken:1  eggplant:1  fish:1  juice:2  meat:1  milk:2  soup:2  tomato:3

Testing traversing "soft" inventory:
apples:1  avocado:1  basil:1  beans:2  bread:1  cake:1  cereal:1  chicken:1  eggplant:1  fish:1  juice:2  meat:1  milk:2  soup:2  tomato:3


at line #30: add meat
First item: apples:1
Last item: tomato:3


Update at line #31: add eggplant
"hard" number of unique items (i.e. mSizeHard) = 15
"soft" number of unique items (i.e. mSize) = 15

Testing traversing "hard" inventory:
apples:1  avocado:1  basil:1  beans:2  bread:1  cake:1  cereal:1  chicken:1  eggplant:2  fish:1  juice:2  meat:1  milk:2  soup:2  tomato:3

Testing traversing "soft" inventory:
apples:1  avocado:1  basil:1  beans:2  bread:1  cake:1  cereal:1  chicken:1  eggplant:2  fish:1  juice:2  meat:1  milk:2  soup:2  tomato:3


at line #31: add eggplant
First item: apples:1
Last item: tomato:3


Update at line #32: add bread
"hard" number of unique items (i.e. mSizeHard) = 15
"soft" number of unique items (i.e. mSize) = 15

Testing traversing "hard" inventory:
apples:1  avocado:1  basil:1  beans:2  bread:2  cake:1  cereal:1  chicken:1  eggplant:2  fish:1  juice:2  meat:1  milk:2  soup:2  tomato:3

Testing traversing "soft" inventory:
apples:1  avocado:1  basil:1  beans:2  bread:2  cake:1  cereal:1  chicken:1  eggplant:2  fish:1  juice:2  meat:1  milk:2  soup:2  tomato:3


at line #32: add bread
First item: apples:1
Last item: tomato:3


Update at line #33: add tomato
"hard" number of unique items (i.e. mSizeHard) = 15
"soft" number of unique items (i.e. mSize) = 15

Testing traversing "hard" inventory:
apples:1  avocado:1  basil:1  beans:2  bread:2  cake:1  cereal:1  chicken:1  eggplant:2  fish:1  juice:2  meat:1  milk:2  soup:2  tomato:4

Testing traversing "soft" inventory:
apples:1  avocado:1  basil:1  beans:2  bread:2  cake:1  cereal:1  chicken:1  eggplant:2  fish:1  juice:2  meat:1  milk:2  soup:2  tomato:4


at line #33: add tomato
First item: apples:1
Last item: tomato:4


Update at line #34: buy meat
"hard" number of unique items (i.e. mSizeHard) = 15
"soft" number of unique items (i.e. mSize) = 14

Testing traversing "hard" inventory:
apples:1  avocado:1  basil:1  beans:2  bread:2  cake:1  cereal:1  chicken:1  eggplant:2  fish:1  juice:2  meat:0  milk:2  soup:2  tomato:4

Testing traversing "soft" inventory:
apples:1  avocado:1  basil:1  beans:2  bread:2  cake:1  cereal:1  chicken:1  eggplant:2  fish:1  juice:2  milk:2  soup:2  tomato:4


at line #34: buy meat
First item: apples:1
Last item: tomato:4


Update at line #35: add soup
"hard" number of unique items (i.e. mSizeHard) = 15
"soft" number of unique items (i.e. mSize) = 14

Testing traversing "hard" inventory:
apples:1  avocado:1  basil:1  beans:2  bread:2  cake:1  cereal:1  chicken:1  eggplant:2  fish:1  juice:2  meat:0  milk:2  soup:3  tomato:4

Testing traversing "soft" inventory:
apples:1  avocado:1  basil:1  beans:2  bread:2  cake:1  cereal:1  chicken:1  eggplant:2  fish:1  juice:2  milk:2  soup:3  tomato:4


at line #35: add soup
First item: apples:1
Last item: tomato:4


Update at line #36: add spaghetti
"hard" number of unique items (i.e. mSizeHard) = 16
"soft" number of unique items (i.e. mSize) = 15

Testing traversing "hard" inventory:
apples:1  avocado:1  basil:1  beans:2  bread:2  cake:1  cereal:1  chicken:1  eggplant:2  fish:1  juice:2  meat:0  milk:2  soup:3  spaghetti:1  tomato:4

Testing traversing "soft" inventory:
apples:1  avocado:1  basil:1  beans:2  bread:2  cake:1  cereal:1  chicken:1  eggplant:2  fish:1  juice:2  milk:2  soup:3  spaghetti:1  tomato:4


at line #36: add spaghetti
First item: apples:1
Last item: tomato:4


Update at line #37: add linguine
"hard" number of unique items (i.e. mSizeHard) = 17
"soft" number of unique items (i.e. mSize) = 16

Testing traversing "hard" inventory:
apples:1  avocado:1  basil:1  beans:2  bread:2  cake:1  cereal:1  chicken:1  eggplant:2  fish:1  juice:2  linguine:1  meat:0  milk:2  soup:3  spaghetti:1  tomato:4

Testing traversing "soft" inventory:
apples:1  avocado:1  basil:1  beans:2  bread:2  cake:1  cereal:1  chicken:1  eggplant:2  fish:1  juice:2  linguine:1  milk:2  soup:3  spaghetti:1  tomato:4


at line #37: add linguine
First item: apples:1
Last item: tomato:4


Update at line #38: add onion
"hard" number of unique items (i.e. mSizeHard) = 18
"soft" number of unique items (i.e. mSize) = 17

Testing traversing "hard" inventory:
apples:1  avocado:1  basil:1  beans:2  bread:2  cake:1  cereal:1  chicken:1  eggplant:2  fish:1  juice:2  linguine:1  meat:0  milk:2  onion:1  soup:3  spaghetti:1  tomato:4

Testing traversing "soft" inventory:
apples:1  avocado:1  basil:1  beans:2  bread:2  cake:1  cereal:1  chicken:1  eggplant:2  fish:1  juice:2  linguine:1  milk:2  onion:1  soup:3  spaghetti:1  tomato:4


at line #38: add onion
First item: apples:1
Last item: tomato:4


Update at line #39: add cereal
"hard" number of unique items (i.e. mSizeHard) = 18
"soft" number of unique items (i.e. mSize) = 17

Testing traversing "hard" inventory:
apples:1  avocado:1  basil:1  beans:2  bread:2  cake:1  cereal:2  chicken:1  eggplant:2  fish:1  juice:2  linguine:1  meat:0  milk:2  onion:1  soup:3  spaghetti:1  tomato:4

Testing traversing "soft" inventory:
apples:1  avocado:1  basil:1  beans:2  bread:2  cake:1  cereal:2  chicken:1  eggplant:2  fish:1  juice:2  linguine:1  milk:2  onion:1  soup:3  spaghetti:1  tomato:4


at line #39: add cereal
First item: apples:1
Last item: tomato:4


Update at line #40: add milk
"hard" number of unique items (i.e. mSizeHard) = 18
"soft" number of unique items (i.e. mSize) = 17

Testing traversing "hard" inventory:
apples:1  avocado:1  basil:1  beans:2  bread:2  cake:1  cereal:2  chicken:1  eggplant:2  fish:1  juice:2  linguine:1  meat:0  milk:3  onion:1  soup:3  spaghetti:1  tomato:4

Testing traversing "soft" inventory:
apples:1  avocado:1  basil:1  beans:2  bread:2  cake:1  cereal:2  chicken:1  eggplant:2  fish:1  juice:2  linguine:1  milk:3  onion:1  soup:3  spaghetti:1  tomato:4


at line #40: add milk
First item: apples:1
Last item: tomato:4


Update at line #41: buy milk
"hard" number of unique items (i.e. mSizeHard) = 18
"soft" number of unique items (i.e. mSize) = 17

Testing traversing "hard" inventory:
apples:1  avocado:1  basil:1  beans:2  bread:2  cake:1  cereal:2  chicken:1  eggplant:2  fish:1  juice:2  linguine:1  meat:0  milk:2  onion:1  soup:3  spaghetti:1  tomato:4

Testing traversing "soft" inventory:
apples:1  avocado:1  basil:1  beans:2  bread:2  cake:1  cereal:2  chicken:1  eggplant:2  fish:1  juice:2  linguine:1  milk:2  onion:1  soup:3  spaghetti:1  tomato:4


at line #41: buy milk
First item: apples:1
Last item: tomato:4


Update at line #42: buy bread
"hard" number of unique items (i.e. mSizeHard) = 18
"soft" number of unique items (i.e. mSize) = 17

Testing traversing "hard" inventory:
apples:1  avocado:1  basil:1  beans:2  bread:1  cake:1  cereal:2  chicken:1  eggplant:2  fish:1  juice:2  linguine:1  meat:0  milk:2  onion:1  soup:3  spaghetti:1  tomato:4

Testing traversing "soft" inventory:
apples:1  avocado:1  basil:1  beans:2  bread:1  cake:1  cereal:2  chicken:1  eggplant:2  fish:1  juice:2  linguine:1  milk:2  onion:1  soup:3  spaghetti:1  tomato:4


at line #42: buy bread
First item: apples:1
Last item: tomato:4


Update at line #43: buy juice
"hard" number of unique items (i.e. mSizeHard) = 18
"soft" number of unique items (i.e. mSize) = 17

Testing traversing "hard" inventory:
apples:1  avocado:1  basil:1  beans:2  bread:1  cake:1  cereal:2  chicken:1  eggplant:2  fish:1  juice:1  linguine:1  meat:0  milk:2  onion:1  soup:3  spaghetti:1  tomato:4

Testing traversing "soft" inventory:
apples:1  avocado:1  basil:1  beans:2  bread:1  cake:1  cereal:2  chicken:1  eggplant:2  fish:1  juice:1  linguine:1  milk:2  onion:1  soup:3  spaghetti:1  tomato:4


at line #43: buy juice
First item: apples:1
Last item: tomato:4

Warning: Unable to fulfill request: at line #44: buy pie
Warning: Item pie is out of stock.

at line #44: buy pie
First item: apples:1
Last item: tomato:4


Update at line #45: buy chicken
"hard" number of unique items (i.e. mSizeHard) = 18
"soft" number of unique items (i.e. mSize) = 16

Testing traversing "hard" inventory:
apples:1  avocado:1  basil:1  beans:2  bread:1  cake:1  cereal:2  chicken:0  eggplant:2  fish:1  juice:1  linguine:1  meat:0  milk:2  onion:1  soup:3  spaghetti:1  tomato:4

Testing traversing "soft" inventory:
apples:1  avocado:1  basil:1  beans:2  bread:1  cake:1  cereal:2  eggplant:2  fish:1  juice:1  linguine:1  milk:2  onion:1  soup:3  spaghetti:1  tomato:4


at line #45: buy chicken
First item: apples:1
Last item: tomato:4


State of inventory before cleanup:
"hard" number of unique items (i.e. mSizeHard) = 18
"soft" number of unique items (i.e. mSize) = 16

Testing traversing "hard" inventory:
apples:1  avocado:1  basil:1  beans:2  bread:1  cake:1  cereal:2  chicken:0  eggplant:2  fish:1  juice:1  linguine:1  meat:0  milk:2  onion:1  soup:3  spaghetti:1  tomato:4

Testing traversing "soft" inventory:
apples:1  avocado:1  basil:1  beans:2  bread:1  cake:1  cereal:2  eggplant:2  fish:1  juice:1  linguine:1  milk:2  onion:1  soup:3  spaghetti:1  tomato:4



Final state of inventory after cleanup:
"hard" number of unique items (i.e. mSizeHard) = 16
"soft" number of unique items (i.e. mSize) = 16

Testing traversing "hard" inventory:
apples:1  avocado:1  basil:1  beans:2  bread:1  cake:1  cereal:2  eggplant:2  fish:1  juice:1  linguine:1  milk:2  onion:1  soup:3  spaghetti:1  tomato:4

Testing traversing "soft" inventory:
apples:1  avocado:1  basil:1  beans:2  bread:1  cake:1  cereal:2  eggplant:2  fish:1  juice:1  linguine:1  milk:2  onion:1  soup:3  spaghetti:1  tomato:4


Done with SuperMarket.

Process finished with exit code 0

-----------------------------------------------------
-----------------------------------------------------
Test file: resources/inventory_short.txt

NOTES: Testing shortened version of  inventory_log.txt
-----------------------------------------------------
/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/bin/java -Didea.launcher.port=7541 "-Didea.launcher.bin.path=/Applications/IntelliJ IDEA.app/Contents/bin" -Dfile.encoding=UTF-8 -classpath "/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/deploy.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/cldrdata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/dnsns.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/jaccess.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/jfxrt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/localedata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/nashorn.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/sunec.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/zipfs.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/javaws.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/jfxswt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/management-agent.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/plugin.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/lib/ant-javafx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/lib/dt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/lib/javafx-mx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/lib/jconsole.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/lib/packager.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/lib/sa-jdi.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/lib/tools.jar:/Users/zachrooney/IdeaProjects/Project Outputs/production/rooneyz-project06:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar" com.intellij.rt.execution.application.AppMain lazyTrees.SuperMarket
Test file: resources/inventory_short.txt
Garbage collection threshold = 4


Update at line #1: add soup
"hard" number of unique items (i.e. mSizeHard) = 1
"soft" number of unique items (i.e. mSize) = 1

Testing traversing "hard" inventory:
soup:1

Testing traversing "soft" inventory:
soup:1


at line #1: add soup
First item: soup:1
Last item: soup:1


Update at line #2: add tangerines
"hard" number of unique items (i.e. mSizeHard) = 2
"soft" number of unique items (i.e. mSize) = 2

Testing traversing "hard" inventory:
soup:1  tangerines:1

Testing traversing "soft" inventory:
soup:1  tangerines:1


at line #2: add tangerines
First item: soup:1
Last item: tangerines:1


Update at line #3: add turnips
"hard" number of unique items (i.e. mSizeHard) = 3
"soft" number of unique items (i.e. mSize) = 3

Testing traversing "hard" inventory:
soup:1  tangerines:1  turnips:1

Testing traversing "soft" inventory:
soup:1  tangerines:1  turnips:1


at line #3: add turnips
First item: soup:1
Last item: turnips:1


Update at line #4: add milk
"hard" number of unique items (i.e. mSizeHard) = 4
"soft" number of unique items (i.e. mSize) = 4

Testing traversing "hard" inventory:
milk:1  soup:1  tangerines:1  turnips:1

Testing traversing "soft" inventory:
milk:1  soup:1  tangerines:1  turnips:1


at line #4: add milk
First item: milk:1
Last item: turnips:1


Update at line #5: add apples
"hard" number of unique items (i.e. mSizeHard) = 5
"soft" number of unique items (i.e. mSize) = 5

Testing traversing "hard" inventory:
apples:1  milk:1  soup:1  tangerines:1  turnips:1

Testing traversing "soft" inventory:
apples:1  milk:1  soup:1  tangerines:1  turnips:1


at line #5: add apples
First item: apples:1
Last item: turnips:1


Update at line #6: add apples
"hard" number of unique items (i.e. mSizeHard) = 5
"soft" number of unique items (i.e. mSize) = 5

Testing traversing "hard" inventory:
apples:2  milk:1  soup:1  tangerines:1  turnips:1

Testing traversing "soft" inventory:
apples:2  milk:1  soup:1  tangerines:1  turnips:1


at line #6: add apples
First item: apples:2
Last item: turnips:1


Update at line #7: add apples
"hard" number of unique items (i.e. mSizeHard) = 5
"soft" number of unique items (i.e. mSize) = 5

Testing traversing "hard" inventory:
apples:3  milk:1  soup:1  tangerines:1  turnips:1

Testing traversing "soft" inventory:
apples:3  milk:1  soup:1  tangerines:1  turnips:1


at line #7: add apples
First item: apples:3
Last item: turnips:1


Update at line #8: add bread
"hard" number of unique items (i.e. mSizeHard) = 6
"soft" number of unique items (i.e. mSize) = 6

Testing traversing "hard" inventory:
apples:3  bread:1  milk:1  soup:1  tangerines:1  turnips:1

Testing traversing "soft" inventory:
apples:3  bread:1  milk:1  soup:1  tangerines:1  turnips:1


at line #8: add bread
First item: apples:3
Last item: turnips:1


Update at line #9: buy soup
"hard" number of unique items (i.e. mSizeHard) = 6
"soft" number of unique items (i.e. mSize) = 5

Testing traversing "hard" inventory:
apples:3  bread:1  milk:1  soup:0  tangerines:1  turnips:1

Testing traversing "soft" inventory:
apples:3  bread:1  milk:1  tangerines:1  turnips:1


at line #9: buy soup
First item: apples:3
Last item: turnips:1


Update at line #10: buy milk
"hard" number of unique items (i.e. mSizeHard) = 6
"soft" number of unique items (i.e. mSize) = 4

Testing traversing "hard" inventory:
apples:3  bread:1  milk:0  soup:0  tangerines:1  turnips:1

Testing traversing "soft" inventory:
apples:3  bread:1  tangerines:1  turnips:1


at line #10: buy milk
First item: apples:3
Last item: turnips:1


Update at line #11: buy bread
"hard" number of unique items (i.e. mSizeHard) = 6
"soft" number of unique items (i.e. mSize) = 3

Testing traversing "hard" inventory:
apples:3  bread:0  milk:0  soup:0  tangerines:1  turnips:1

Testing traversing "soft" inventory:
apples:3  tangerines:1  turnips:1


at line #11: buy bread
First item: apples:3
Last item: turnips:1


State of inventory before cleanup:
"hard" number of unique items (i.e. mSizeHard) = 6
"soft" number of unique items (i.e. mSize) = 3

Testing traversing "hard" inventory:
apples:3  bread:0  milk:0  soup:0  tangerines:1  turnips:1

Testing traversing "soft" inventory:
apples:3  tangerines:1  turnips:1



Final state of inventory after cleanup:
"hard" number of unique items (i.e. mSizeHard) = 3
"soft" number of unique items (i.e. mSize) = 3

Testing traversing "hard" inventory:
apples:3  tangerines:1  turnips:1

Testing traversing "soft" inventory:
apples:3  tangerines:1  turnips:1


Done with SuperMarket.

Process finished with exit code 0

-----------------------------------------------------
-----------------------------------------------------
Test file: resources/SuperMarketFullTest

NOTES: Full test of program including error handling
-----------------------------------------------------
/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/bin/java -Didea.launcher.port=7542 "-Didea.launcher.bin.path=/Applications/IntelliJ IDEA.app/Contents/bin" -Dfile.encoding=UTF-8 -classpath "/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/deploy.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/cldrdata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/dnsns.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/jaccess.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/jfxrt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/localedata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/nashorn.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/sunec.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/ext/zipfs.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/javaws.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/jfxswt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/management-agent.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/plugin.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/lib/ant-javafx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/lib/dt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/lib/javafx-mx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/lib/jconsole.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/lib/packager.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/lib/sa-jdi.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/lib/tools.jar:/Users/zachrooney/IdeaProjects/Project Outputs/production/rooneyz-project06:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar" com.intellij.rt.execution.application.AppMain lazyTrees.SuperMarket
Test file: resources/SuperMarketFullTest
Garbage collection threshold = 4


Update at line #1: add soup
"hard" number of unique items (i.e. mSizeHard) = 1
"soft" number of unique items (i.e. mSize) = 1

Testing traversing "hard" inventory:
soup:1

Testing traversing "soft" inventory:
soup:1


at line #1: add soup
First item: soup:1
Last item: soup:1


Update at line #2: add milk
"hard" number of unique items (i.e. mSizeHard) = 2
"soft" number of unique items (i.e. mSize) = 2

Testing traversing "hard" inventory:
milk:1  soup:1

Testing traversing "soft" inventory:
milk:1  soup:1


at line #2: add milk
First item: milk:1
Last item: soup:1


Update at line #3: add apples
"hard" number of unique items (i.e. mSizeHard) = 3
"soft" number of unique items (i.e. mSize) = 3

Testing traversing "hard" inventory:
apples:1  milk:1  soup:1

Testing traversing "soft" inventory:
apples:1  milk:1  soup:1


at line #3: add apples
First item: apples:1
Last item: soup:1


Update at line #4: add apples
"hard" number of unique items (i.e. mSizeHard) = 3
"soft" number of unique items (i.e. mSize) = 3

Testing traversing "hard" inventory:
apples:2  milk:1  soup:1

Testing traversing "soft" inventory:
apples:2  milk:1  soup:1


at line #4: add apples
First item: apples:2
Last item: soup:1


Update at line #5: add apples
"hard" number of unique items (i.e. mSizeHard) = 3
"soft" number of unique items (i.e. mSize) = 3

Testing traversing "hard" inventory:
apples:3  milk:1  soup:1

Testing traversing "soft" inventory:
apples:3  milk:1  soup:1


at line #5: add apples
First item: apples:3
Last item: soup:1


Update at line #6: add apples
"hard" number of unique items (i.e. mSizeHard) = 3
"soft" number of unique items (i.e. mSize) = 3

Testing traversing "hard" inventory:
apples:4  milk:1  soup:1

Testing traversing "soft" inventory:
apples:4  milk:1  soup:1


at line #6: add apples
First item: apples:4
Last item: soup:1


Update at line #7: add apples
"hard" number of unique items (i.e. mSizeHard) = 3
"soft" number of unique items (i.e. mSize) = 3

Testing traversing "hard" inventory:
apples:5  milk:1  soup:1

Testing traversing "soft" inventory:
apples:5  milk:1  soup:1


at line #7: add apples
First item: apples:5
Last item: soup:1


Update at line #8: add bread
"hard" number of unique items (i.e. mSizeHard) = 4
"soft" number of unique items (i.e. mSize) = 4

Testing traversing "hard" inventory:
apples:5  bread:1  milk:1  soup:1

Testing traversing "soft" inventory:
apples:5  bread:1  milk:1  soup:1


at line #8: add bread
First item: apples:5
Last item: soup:1


Update at line #9: buy apples
"hard" number of unique items (i.e. mSizeHard) = 4
"soft" number of unique items (i.e. mSize) = 4

Testing traversing "hard" inventory:
apples:4  bread:1  milk:1  soup:1

Testing traversing "soft" inventory:
apples:4  bread:1  milk:1  soup:1


at line #9: buy apples
First item: apples:4
Last item: soup:1


Update at line #10: buy apples
"hard" number of unique items (i.e. mSizeHard) = 4
"soft" number of unique items (i.e. mSize) = 4

Testing traversing "hard" inventory:
apples:3  bread:1  milk:1  soup:1

Testing traversing "soft" inventory:
apples:3  bread:1  milk:1  soup:1


at line #10: buy apples
First item: apples:3
Last item: soup:1


Update at line #11: buy apples
"hard" number of unique items (i.e. mSizeHard) = 4
"soft" number of unique items (i.e. mSize) = 4

Testing traversing "hard" inventory:
apples:2  bread:1  milk:1  soup:1

Testing traversing "soft" inventory:
apples:2  bread:1  milk:1  soup:1


at line #11: buy apples
First item: apples:2
Last item: soup:1


Update at line #12: buy soup
"hard" number of unique items (i.e. mSizeHard) = 4
"soft" number of unique items (i.e. mSize) = 3

Testing traversing "hard" inventory:
apples:2  bread:1  milk:1  soup:0

Testing traversing "soft" inventory:
apples:2  bread:1  milk:1


at line #12: buy soup
First item: apples:2
Last item: milk:1


Update at line #13: buy bread
"hard" number of unique items (i.e. mSizeHard) = 4
"soft" number of unique items (i.e. mSize) = 2

Testing traversing "hard" inventory:
apples:2  bread:0  milk:1  soup:0

Testing traversing "soft" inventory:
apples:2  milk:1


at line #13: buy bread
First item: apples:2
Last item: milk:1


Update at line #14: add peppers
"hard" number of unique items (i.e. mSizeHard) = 5
"soft" number of unique items (i.e. mSize) = 3

Testing traversing "hard" inventory:
apples:2  bread:0  milk:1  peppers:1  soup:0

Testing traversing "soft" inventory:
apples:2  milk:1  peppers:1


at line #14: add peppers
First item: apples:2
Last item: peppers:1


Update at line #15: add yogurt
"hard" number of unique items (i.e. mSizeHard) = 6
"soft" number of unique items (i.e. mSize) = 4

Testing traversing "hard" inventory:
apples:2  bread:0  milk:1  peppers:1  soup:0  yogurt:1

Testing traversing "soft" inventory:
apples:2  milk:1  peppers:1  yogurt:1


at line #15: add yogurt
First item: apples:2
Last item: yogurt:1


Update at line #16: add potatoes
"hard" number of unique items (i.e. mSizeHard) = 7
"soft" number of unique items (i.e. mSize) = 5

Testing traversing "hard" inventory:
apples:2  bread:0  milk:1  peppers:1  potatoes:1  soup:0  yogurt:1

Testing traversing "soft" inventory:
apples:2  milk:1  peppers:1  potatoes:1  yogurt:1


at line #16: add potatoes
First item: apples:2
Last item: yogurt:1


Update at line #17: buy apples
"hard" number of unique items (i.e. mSizeHard) = 7
"soft" number of unique items (i.e. mSize) = 5

Testing traversing "hard" inventory:
apples:1  bread:0  milk:1  peppers:1  potatoes:1  soup:0  yogurt:1

Testing traversing "soft" inventory:
apples:1  milk:1  peppers:1  potatoes:1  yogurt:1


at line #17: buy apples
First item: apples:1
Last item: yogurt:1


Update at line #18: buy milk
"hard" number of unique items (i.e. mSizeHard) = 7
"soft" number of unique items (i.e. mSize) = 4

Testing traversing "hard" inventory:
apples:1  bread:0  milk:0  peppers:1  potatoes:1  soup:0  yogurt:1

Testing traversing "soft" inventory:
apples:1  peppers:1  potatoes:1  yogurt:1


at line #18: buy milk
First item: apples:1
Last item: yogurt:1


Update at line #19: buy apples
"hard" number of unique items (i.e. mSizeHard) = 7
"soft" number of unique items (i.e. mSize) = 3

Testing traversing "hard" inventory:
apples:0  bread:0  milk:0  peppers:1  potatoes:1  soup:0  yogurt:1

Testing traversing "soft" inventory:
peppers:1  potatoes:1  yogurt:1


at line #19: buy apples
First item: peppers:1
Last item: yogurt:1

at line #19: buy apples
calling garbage collection...

inventory after garbage collection:
"hard" number of unique items (i.e. mSizeHard) = 3
"soft" number of unique items (i.e. mSize) = 3

Testing traversing "hard" inventory:
peppers:1  potatoes:1  yogurt:1

Testing traversing "soft" inventory:
peppers:1  potatoes:1  yogurt:1



Update at line #20: buy peppers
"hard" number of unique items (i.e. mSizeHard) = 3
"soft" number of unique items (i.e. mSize) = 2

Testing traversing "hard" inventory:
peppers:0  potatoes:1  yogurt:1

Testing traversing "soft" inventory:
potatoes:1  yogurt:1


at line #20: buy peppers
First item: potatoes:1
Last item: yogurt:1


Update at line #21: buy potatoes
"hard" number of unique items (i.e. mSizeHard) = 3
"soft" number of unique items (i.e. mSize) = 1

Testing traversing "hard" inventory:
peppers:0  potatoes:0  yogurt:1

Testing traversing "soft" inventory:
yogurt:1


at line #21: buy potatoes
First item: yogurt:1
Last item: yogurt:1


Update at line #22: buy yogurt
"hard" number of unique items (i.e. mSizeHard) = 3
"soft" number of unique items (i.e. mSize) = 0

Testing traversing "hard" inventory:
peppers:0  potatoes:0  yogurt:0

Testing traversing "soft" inventory:



at line #22: buy yogurt
Warning: minimum element not found!
Warning: maximum element not found!

Warning: Unable to fulfill request: at line #23: buy beans
Warning: Item beans is out of stock.

at line #23: buy beans
Warning: minimum element not found!
Warning: maximum element not found!

Warning: Unable to fulfill request: at line #24: buy apples
Warning: Item apples is out of stock.

at line #24: buy apples
Warning: minimum element not found!
Warning: maximum element not found!


Update at line #25: add fish
"hard" number of unique items (i.e. mSizeHard) = 4
"soft" number of unique items (i.e. mSize) = 1

Testing traversing "hard" inventory:
fish:1  peppers:0  potatoes:0  yogurt:0

Testing traversing "soft" inventory:
fish:1


at line #25: add fish
First item: fish:1
Last item: fish:1


Update at line #26: buy fish
"hard" number of unique items (i.e. mSizeHard) = 4
"soft" number of unique items (i.e. mSize) = 0

Testing traversing "hard" inventory:
fish:0  peppers:0  potatoes:0  yogurt:0

Testing traversing "soft" inventory:



at line #26: buy fish
Warning: minimum element not found!
Warning: maximum element not found!

at line #26: buy fish
calling garbage collection...

inventory after garbage collection:
"hard" number of unique items (i.e. mSizeHard) = 0
"soft" number of unique items (i.e. mSize) = 0

Testing traversing "hard" inventory:


Testing traversing "soft" inventory:



Warning: Unable to fulfill request: at line #27: buy fish
Warning: Item fish is out of stock.

at line #27: buy fish
Warning: minimum element not found!
Warning: maximum element not found!


Update at line #28: add fish
"hard" number of unique items (i.e. mSizeHard) = 1
"soft" number of unique items (i.e. mSize) = 1

Testing traversing "hard" inventory:
fish:1

Testing traversing "soft" inventory:
fish:1


at line #28: add fish
First item: fish:1
Last item: fish:1


Update at line #29: buy fish
"hard" number of unique items (i.e. mSizeHard) = 1
"soft" number of unique items (i.e. mSize) = 0

Testing traversing "hard" inventory:
fish:0

Testing traversing "soft" inventory:



at line #29: buy fish
Warning: minimum element not found!
Warning: maximum element not found!


Update at line #30: add pie
"hard" number of unique items (i.e. mSizeHard) = 2
"soft" number of unique items (i.e. mSize) = 1

Testing traversing "hard" inventory:
fish:0  pie:1

Testing traversing "soft" inventory:
pie:1


at line #30: add pie
First item: pie:1
Last item: pie:1


Update at line #31: add apple
"hard" number of unique items (i.e. mSizeHard) = 3
"soft" number of unique items (i.e. mSize) = 2

Testing traversing "hard" inventory:
apple:1  fish:0  pie:1

Testing traversing "soft" inventory:
apple:1  pie:1


at line #31: add apple
First item: apple:1
Last item: pie:1


Update at line #32: add waxPaper
"hard" number of unique items (i.e. mSizeHard) = 4
"soft" number of unique items (i.e. mSize) = 3

Testing traversing "hard" inventory:
apple:1  fish:0  pie:1  waxPaper:1

Testing traversing "soft" inventory:
apple:1  pie:1  waxPaper:1


at line #32: add waxPaper
First item: apple:1
Last item: waxPaper:1


Update at line #33: add zucchini
"hard" number of unique items (i.e. mSizeHard) = 5
"soft" number of unique items (i.e. mSize) = 4

Testing traversing "hard" inventory:
apple:1  fish:0  pie:1  waxPaper:1  zucchini:1

Testing traversing "soft" inventory:
apple:1  pie:1  waxPaper:1  zucchini:1


at line #33: add zucchini
First item: apple:1
Last item: zucchini:1


Update at line #34: add ale
"hard" number of unique items (i.e. mSizeHard) = 6
"soft" number of unique items (i.e. mSize) = 5

Testing traversing "hard" inventory:
ale:1  apple:1  fish:0  pie:1  waxPaper:1  zucchini:1

Testing traversing "soft" inventory:
ale:1  apple:1  pie:1  waxPaper:1  zucchini:1


at line #34: add ale
First item: ale:1
Last item: zucchini:1


Update at line #35: add cake
"hard" number of unique items (i.e. mSizeHard) = 7
"soft" number of unique items (i.e. mSize) = 6

Testing traversing "hard" inventory:
ale:1  apple:1  cake:1  fish:0  pie:1  waxPaper:1  zucchini:1

Testing traversing "soft" inventory:
ale:1  apple:1  cake:1  pie:1  waxPaper:1  zucchini:1


at line #35: add cake
First item: ale:1
Last item: zucchini:1


Update at line #36: add fish
"hard" number of unique items (i.e. mSizeHard) = 7
"soft" number of unique items (i.e. mSize) = 7

Testing traversing "hard" inventory:
ale:1  apple:1  cake:1  fish:1  pie:1  waxPaper:1  zucchini:1

Testing traversing "soft" inventory:
ale:1  apple:1  cake:1  fish:1  pie:1  waxPaper:1  zucchini:1


at line #36: add fish
First item: ale:1
Last item: zucchini:1


Update at line #37: add chicken
"hard" number of unique items (i.e. mSizeHard) = 8
"soft" number of unique items (i.e. mSize) = 8

Testing traversing "hard" inventory:
ale:1  apple:1  cake:1  chicken:1  fish:1  pie:1  waxPaper:1  zucchini:1

Testing traversing "soft" inventory:
ale:1  apple:1  cake:1  chicken:1  fish:1  pie:1  waxPaper:1  zucchini:1


at line #37: add chicken
First item: ale:1
Last item: zucchini:1


Update at line #38: add cereal
"hard" number of unique items (i.e. mSizeHard) = 9
"soft" number of unique items (i.e. mSize) = 9

Testing traversing "hard" inventory:
ale:1  apple:1  cake:1  cereal:1  chicken:1  fish:1  pie:1  waxPaper:1  zucchini:1

Testing traversing "soft" inventory:
ale:1  apple:1  cake:1  cereal:1  chicken:1  fish:1  pie:1  waxPaper:1  zucchini:1


at line #38: add cereal
First item: ale:1
Last item: zucchini:1


Update at line #39: buy zucchini
"hard" number of unique items (i.e. mSizeHard) = 9
"soft" number of unique items (i.e. mSize) = 8

Testing traversing "hard" inventory:
ale:1  apple:1  cake:1  cereal:1  chicken:1  fish:1  pie:1  waxPaper:1  zucchini:0

Testing traversing "soft" inventory:
ale:1  apple:1  cake:1  cereal:1  chicken:1  fish:1  pie:1  waxPaper:1


at line #39: buy zucchini
First item: ale:1
Last item: waxPaper:1


Update at line #40: add cookies
"hard" number of unique items (i.e. mSizeHard) = 10
"soft" number of unique items (i.e. mSize) = 9

Testing traversing "hard" inventory:
ale:1  apple:1  cake:1  cereal:1  chicken:1  cookies:1  fish:1  pie:1  waxPaper:1  zucchini:0

Testing traversing "soft" inventory:
ale:1  apple:1  cake:1  cereal:1  chicken:1  cookies:1  fish:1  pie:1  waxPaper:1


at line #40: add cookies
First item: ale:1
Last item: waxPaper:1

Warning: Unable to fulfill request: at line #41: buy onion
Warning: Item onion is out of stock.

at line #41: buy onion
First item: ale:1
Last item: waxPaper:1


Update at line #42: buy pie
"hard" number of unique items (i.e. mSizeHard) = 10
"soft" number of unique items (i.e. mSize) = 8

Testing traversing "hard" inventory:
ale:1  apple:1  cake:1  cereal:1  chicken:1  cookies:1  fish:1  pie:0  waxPaper:1  zucchini:0

Testing traversing "soft" inventory:
ale:1  apple:1  cake:1  cereal:1  chicken:1  cookies:1  fish:1  waxPaper:1


at line #42: buy pie
First item: ale:1
Last item: waxPaper:1


Update at line #43: buy cookies
"hard" number of unique items (i.e. mSizeHard) = 10
"soft" number of unique items (i.e. mSize) = 7

Testing traversing "hard" inventory:
ale:1  apple:1  cake:1  cereal:1  chicken:1  cookies:0  fish:1  pie:0  waxPaper:1  zucchini:0

Testing traversing "soft" inventory:
ale:1  apple:1  cake:1  cereal:1  chicken:1  fish:1  waxPaper:1


at line #43: buy cookies
First item: ale:1
Last item: waxPaper:1

at line #43: buy cookies
calling garbage collection...

inventory after garbage collection:
"hard" number of unique items (i.e. mSizeHard) = 7
"soft" number of unique items (i.e. mSize) = 7

Testing traversing "hard" inventory:
ale:1  apple:1  cake:1  cereal:1  chicken:1  fish:1  waxPaper:1

Testing traversing "soft" inventory:
ale:1  apple:1  cake:1  cereal:1  chicken:1  fish:1  waxPaper:1



Update at line #44: buy ale
"hard" number of unique items (i.e. mSizeHard) = 7
"soft" number of unique items (i.e. mSize) = 6

Testing traversing "hard" inventory:
ale:0  apple:1  cake:1  cereal:1  chicken:1  fish:1  waxPaper:1

Testing traversing "soft" inventory:
apple:1  cake:1  cereal:1  chicken:1  fish:1  waxPaper:1


at line #44: buy ale
First item: apple:1
Last item: waxPaper:1


Update at line #45: add apples
"hard" number of unique items (i.e. mSizeHard) = 8
"soft" number of unique items (i.e. mSize) = 7

Testing traversing "hard" inventory:
ale:0  apple:1  apples:1  cake:1  cereal:1  chicken:1  fish:1  waxPaper:1

Testing traversing "soft" inventory:
apple:1  apples:1  cake:1  cereal:1  chicken:1  fish:1  waxPaper:1


at line #45: add apples
First item: apple:1
Last item: waxPaper:1


Update at line #46: add basil
"hard" number of unique items (i.e. mSizeHard) = 9
"soft" number of unique items (i.e. mSize) = 8

Testing traversing "hard" inventory:
ale:0  apple:1  apples:1  basil:1  cake:1  cereal:1  chicken:1  fish:1  waxPaper:1

Testing traversing "soft" inventory:
apple:1  apples:1  basil:1  cake:1  cereal:1  chicken:1  fish:1  waxPaper:1


at line #46: add basil
First item: apple:1
Last item: waxPaper:1


Update at line #47: add juice
"hard" number of unique items (i.e. mSizeHard) = 10
"soft" number of unique items (i.e. mSize) = 9

Testing traversing "hard" inventory:
ale:0  apple:1  apples:1  basil:1  cake:1  cereal:1  chicken:1  fish:1  juice:1  waxPaper:1

Testing traversing "soft" inventory:
apple:1  apples:1  basil:1  cake:1  cereal:1  chicken:1  fish:1  juice:1  waxPaper:1


at line #47: add juice
First item: apple:1
Last item: waxPaper:1


Update at line #48: add juice
"hard" number of unique items (i.e. mSizeHard) = 10
"soft" number of unique items (i.e. mSize) = 9

Testing traversing "hard" inventory:
ale:0  apple:1  apples:1  basil:1  cake:1  cereal:1  chicken:1  fish:1  juice:2  waxPaper:1

Testing traversing "soft" inventory:
apple:1  apples:1  basil:1  cake:1  cereal:1  chicken:1  fish:1  juice:2  waxPaper:1


at line #48: add juice
First item: apple:1
Last item: waxPaper:1


Update at line #49: add bread
"hard" number of unique items (i.e. mSizeHard) = 11
"soft" number of unique items (i.e. mSize) = 10

Testing traversing "hard" inventory:
ale:0  apple:1  apples:1  basil:1  bread:1  cake:1  cereal:1  chicken:1  fish:1  juice:2  waxPaper:1

Testing traversing "soft" inventory:
apple:1  apples:1  basil:1  bread:1  cake:1  cereal:1  chicken:1  fish:1  juice:2  waxPaper:1


at line #49: add bread
First item: apple:1
Last item: waxPaper:1


Update at line #50: add meat
"hard" number of unique items (i.e. mSizeHard) = 12
"soft" number of unique items (i.e. mSize) = 11

Testing traversing "hard" inventory:
ale:0  apple:1  apples:1  basil:1  bread:1  cake:1  cereal:1  chicken:1  fish:1  juice:2  meat:1  waxPaper:1

Testing traversing "soft" inventory:
apple:1  apples:1  basil:1  bread:1  cake:1  cereal:1  chicken:1  fish:1  juice:2  meat:1  waxPaper:1


at line #50: add meat
First item: apple:1
Last item: waxPaper:1


Update at line #51: add eggplant
"hard" number of unique items (i.e. mSizeHard) = 13
"soft" number of unique items (i.e. mSize) = 12

Testing traversing "hard" inventory:
ale:0  apple:1  apples:1  basil:1  bread:1  cake:1  cereal:1  chicken:1  eggplant:1  fish:1  juice:2  meat:1  waxPaper:1

Testing traversing "soft" inventory:
apple:1  apples:1  basil:1  bread:1  cake:1  cereal:1  chicken:1  eggplant:1  fish:1  juice:2  meat:1  waxPaper:1


at line #51: add eggplant
First item: apple:1
Last item: waxPaper:1


Update at line #52: add bread
"hard" number of unique items (i.e. mSizeHard) = 13
"soft" number of unique items (i.e. mSize) = 12

Testing traversing "hard" inventory:
ale:0  apple:1  apples:1  basil:1  bread:2  cake:1  cereal:1  chicken:1  eggplant:1  fish:1  juice:2  meat:1  waxPaper:1

Testing traversing "soft" inventory:
apple:1  apples:1  basil:1  bread:2  cake:1  cereal:1  chicken:1  eggplant:1  fish:1  juice:2  meat:1  waxPaper:1


at line #52: add bread
First item: apple:1
Last item: waxPaper:1


Update at line #53: add tomato
"hard" number of unique items (i.e. mSizeHard) = 14
"soft" number of unique items (i.e. mSize) = 13

Testing traversing "hard" inventory:
ale:0  apple:1  apples:1  basil:1  bread:2  cake:1  cereal:1  chicken:1  eggplant:1  fish:1  juice:2  meat:1  tomato:1  waxPaper:1

Testing traversing "soft" inventory:
apple:1  apples:1  basil:1  bread:2  cake:1  cereal:1  chicken:1  eggplant:1  fish:1  juice:2  meat:1  tomato:1  waxPaper:1


at line #53: add tomato
First item: apple:1
Last item: waxPaper:1


Update at line #54: buy meat
"hard" number of unique items (i.e. mSizeHard) = 14
"soft" number of unique items (i.e. mSize) = 12

Testing traversing "hard" inventory:
ale:0  apple:1  apples:1  basil:1  bread:2  cake:1  cereal:1  chicken:1  eggplant:1  fish:1  juice:2  meat:0  tomato:1  waxPaper:1

Testing traversing "soft" inventory:
apple:1  apples:1  basil:1  bread:2  cake:1  cereal:1  chicken:1  eggplant:1  fish:1  juice:2  tomato:1  waxPaper:1


at line #54: buy meat
First item: apple:1
Last item: waxPaper:1


Update at line #55: add soup
"hard" number of unique items (i.e. mSizeHard) = 15
"soft" number of unique items (i.e. mSize) = 13

Testing traversing "hard" inventory:
ale:0  apple:1  apples:1  basil:1  bread:2  cake:1  cereal:1  chicken:1  eggplant:1  fish:1  juice:2  meat:0  soup:1  tomato:1  waxPaper:1

Testing traversing "soft" inventory:
apple:1  apples:1  basil:1  bread:2  cake:1  cereal:1  chicken:1  eggplant:1  fish:1  juice:2  soup:1  tomato:1  waxPaper:1


at line #55: add soup
First item: apple:1
Last item: waxPaper:1


Update at line #56: add spaghetti
"hard" number of unique items (i.e. mSizeHard) = 16
"soft" number of unique items (i.e. mSize) = 14

Testing traversing "hard" inventory:
ale:0  apple:1  apples:1  basil:1  bread:2  cake:1  cereal:1  chicken:1  eggplant:1  fish:1  juice:2  meat:0  soup:1  spaghetti:1  tomato:1  waxPaper:1

Testing traversing "soft" inventory:
apple:1  apples:1  basil:1  bread:2  cake:1  cereal:1  chicken:1  eggplant:1  fish:1  juice:2  soup:1  spaghetti:1  tomato:1  waxPaper:1


at line #56: add spaghetti
First item: apple:1
Last item: waxPaper:1


Update at line #57: add linguine
"hard" number of unique items (i.e. mSizeHard) = 17
"soft" number of unique items (i.e. mSize) = 15

Testing traversing "hard" inventory:
ale:0  apple:1  apples:1  basil:1  bread:2  cake:1  cereal:1  chicken:1  eggplant:1  fish:1  juice:2  linguine:1  meat:0  soup:1  spaghetti:1  tomato:1  waxPaper:1

Testing traversing "soft" inventory:
apple:1  apples:1  basil:1  bread:2  cake:1  cereal:1  chicken:1  eggplant:1  fish:1  juice:2  linguine:1  soup:1  spaghetti:1  tomato:1  waxPaper:1


at line #57: add linguine
First item: apple:1
Last item: waxPaper:1


Update at line #58: add onion
"hard" number of unique items (i.e. mSizeHard) = 18
"soft" number of unique items (i.e. mSize) = 16

Testing traversing "hard" inventory:
ale:0  apple:1  apples:1  basil:1  bread:2  cake:1  cereal:1  chicken:1  eggplant:1  fish:1  juice:2  linguine:1  meat:0  onion:1  soup:1  spaghetti:1  tomato:1  waxPaper:1

Testing traversing "soft" inventory:
apple:1  apples:1  basil:1  bread:2  cake:1  cereal:1  chicken:1  eggplant:1  fish:1  juice:2  linguine:1  onion:1  soup:1  spaghetti:1  tomato:1  waxPaper:1


at line #58: add onion
First item: apple:1
Last item: waxPaper:1


Update at line #59: add cereal
"hard" number of unique items (i.e. mSizeHard) = 18
"soft" number of unique items (i.e. mSize) = 16

Testing traversing "hard" inventory:
ale:0  apple:1  apples:1  basil:1  bread:2  cake:1  cereal:2  chicken:1  eggplant:1  fish:1  juice:2  linguine:1  meat:0  onion:1  soup:1  spaghetti:1  tomato:1  waxPaper:1

Testing traversing "soft" inventory:
apple:1  apples:1  basil:1  bread:2  cake:1  cereal:2  chicken:1  eggplant:1  fish:1  juice:2  linguine:1  onion:1  soup:1  spaghetti:1  tomato:1  waxPaper:1


at line #59: add cereal
First item: apple:1
Last item: waxPaper:1


Update at line #60: add milk
"hard" number of unique items (i.e. mSizeHard) = 19
"soft" number of unique items (i.e. mSize) = 17

Testing traversing "hard" inventory:
ale:0  apple:1  apples:1  basil:1  bread:2  cake:1  cereal:2  chicken:1  eggplant:1  fish:1  juice:2  linguine:1  meat:0  milk:1  onion:1  soup:1  spaghetti:1  tomato:1  waxPaper:1

Testing traversing "soft" inventory:
apple:1  apples:1  basil:1  bread:2  cake:1  cereal:2  chicken:1  eggplant:1  fish:1  juice:2  linguine:1  milk:1  onion:1  soup:1  spaghetti:1  tomato:1  waxPaper:1


at line #60: add milk
First item: apple:1
Last item: waxPaper:1


Update at line #61: buy milk
"hard" number of unique items (i.e. mSizeHard) = 19
"soft" number of unique items (i.e. mSize) = 16

Testing traversing "hard" inventory:
ale:0  apple:1  apples:1  basil:1  bread:2  cake:1  cereal:2  chicken:1  eggplant:1  fish:1  juice:2  linguine:1  meat:0  milk:0  onion:1  soup:1  spaghetti:1  tomato:1  waxPaper:1

Testing traversing "soft" inventory:
apple:1  apples:1  basil:1  bread:2  cake:1  cereal:2  chicken:1  eggplant:1  fish:1  juice:2  linguine:1  onion:1  soup:1  spaghetti:1  tomato:1  waxPaper:1


at line #61: buy milk
First item: apple:1
Last item: waxPaper:1


Update at line #62: buy bread
"hard" number of unique items (i.e. mSizeHard) = 19
"soft" number of unique items (i.e. mSize) = 16

Testing traversing "hard" inventory:
ale:0  apple:1  apples:1  basil:1  bread:1  cake:1  cereal:2  chicken:1  eggplant:1  fish:1  juice:2  linguine:1  meat:0  milk:0  onion:1  soup:1  spaghetti:1  tomato:1  waxPaper:1

Testing traversing "soft" inventory:
apple:1  apples:1  basil:1  bread:1  cake:1  cereal:2  chicken:1  eggplant:1  fish:1  juice:2  linguine:1  onion:1  soup:1  spaghetti:1  tomato:1  waxPaper:1


at line #62: buy bread
First item: apple:1
Last item: waxPaper:1


Update at line #63: buy juice
"hard" number of unique items (i.e. mSizeHard) = 19
"soft" number of unique items (i.e. mSize) = 16

Testing traversing "hard" inventory:
ale:0  apple:1  apples:1  basil:1  bread:1  cake:1  cereal:2  chicken:1  eggplant:1  fish:1  juice:1  linguine:1  meat:0  milk:0  onion:1  soup:1  spaghetti:1  tomato:1  waxPaper:1

Testing traversing "soft" inventory:
apple:1  apples:1  basil:1  bread:1  cake:1  cereal:2  chicken:1  eggplant:1  fish:1  juice:1  linguine:1  onion:1  soup:1  spaghetti:1  tomato:1  waxPaper:1


at line #63: buy juice
First item: apple:1
Last item: waxPaper:1

Warning: Unable to fulfill request: at line #64: buy pie
Warning: Item pie is out of stock.

at line #64: buy pie
First item: apple:1
Last item: waxPaper:1


Update at line #65: buy chicken
"hard" number of unique items (i.e. mSizeHard) = 19
"soft" number of unique items (i.e. mSize) = 15

Testing traversing "hard" inventory:
ale:0  apple:1  apples:1  basil:1  bread:1  cake:1  cereal:2  chicken:0  eggplant:1  fish:1  juice:1  linguine:1  meat:0  milk:0  onion:1  soup:1  spaghetti:1  tomato:1  waxPaper:1

Testing traversing "soft" inventory:
apple:1  apples:1  basil:1  bread:1  cake:1  cereal:2  eggplant:1  fish:1  juice:1  linguine:1  onion:1  soup:1  spaghetti:1  tomato:1  waxPaper:1


at line #65: buy chicken
First item: apple:1
Last item: waxPaper:1

at line #65: buy chicken
calling garbage collection...

inventory after garbage collection:
"hard" number of unique items (i.e. mSizeHard) = 15
"soft" number of unique items (i.e. mSize) = 15

Testing traversing "hard" inventory:
apple:1  apples:1  basil:1  bread:1  cake:1  cereal:2  eggplant:1  fish:1  juice:1  linguine:1  onion:1  soup:1  spaghetti:1  tomato:1  waxPaper:1

Testing traversing "soft" inventory:
apple:1  apples:1  basil:1  bread:1  cake:1  cereal:2  eggplant:1  fish:1  juice:1  linguine:1  onion:1  soup:1  spaghetti:1  tomato:1  waxPaper:1



State of inventory before cleanup:
"hard" number of unique items (i.e. mSizeHard) = 15
"soft" number of unique items (i.e. mSize) = 15

Testing traversing "hard" inventory:
apple:1  apples:1  basil:1  bread:1  cake:1  cereal:2  eggplant:1  fish:1  juice:1  linguine:1  onion:1  soup:1  spaghetti:1  tomato:1  waxPaper:1

Testing traversing "soft" inventory:
apple:1  apples:1  basil:1  bread:1  cake:1  cereal:2  eggplant:1  fish:1  juice:1  linguine:1  onion:1  soup:1  spaghetti:1  tomato:1  waxPaper:1



Final state of inventory after cleanup:
"hard" number of unique items (i.e. mSizeHard) = 15
"soft" number of unique items (i.e. mSize) = 15

Testing traversing "hard" inventory:
apple:1  apples:1  basil:1  bread:1  cake:1  cereal:2  eggplant:1  fish:1  juice:1  linguine:1  onion:1  soup:1  spaghetti:1  tomato:1  waxPaper:1

Testing traversing "soft" inventory:
apple:1  apples:1  basil:1  bread:1  cake:1  cereal:2  eggplant:1  fish:1  juice:1  linguine:1  onion:1  soup:1  spaghetti:1  tomato:1  waxPaper:1


Done with SuperMarket.

Process finished with exit code 0
